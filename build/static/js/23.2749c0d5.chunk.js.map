{"version":3,"sources":["assets/MaskGroup.svg","assets/Vector.svg","Services/getPasswordValidationSchema.ts","Pages/AuthPage/components/PasswordConfirm/constants/index.tsx","Pages/AuthPage/components/SignIn/constants/index.ts","Services/buttons.tsx","Services/typography.tsx","Pages/AuthPage/components/PasswordConfirm/index.tsx","Pages/AuthPage/components/AttachPhoto/index.tsx","Pages/AuthPage/components/SignUp/constants/index.ts","assets/Vector_tel.svg","Pages/AuthPage/components/SignUp/index.tsx","assets/Vector_lock.svg","Pages/AuthPage/components/SignIn/index.tsx","Pages/AuthPage/containers/mainContainer.tsx","Pages/AuthPage/index.ts"],"names":["getPasswordValidationSchema","Yup","min","max","matches","required","validationSchema","newPassword","repeatPassword","oneOf","initialState","passwordInfoValidation","name","validation","phoneNumber","Button","props","type","onClickFunction","className","text","onClick","TypographyComponent","firstText","secondText","Typography","PasswordConfirm","btnTheme","changeForm","useState","isSignIn","setIsSignIn","isAttachPhoto","setIsAttachPhoto","setNextStep","file","useTypedSelector","state","newFile","click","values","a","sessionStorage","getItem","password","telegrammID","role","formData","FormData","append","registration","then","alert","Grid","Paper","variant","gutterBottom","initialValues","validateOnMount","onSubmit","setSubmitting","formikProps","label","secureTextEntry","infoValidation","component","src","Vector","id","alt","AttachPhoto","isSignUp","setIsSignUp","isNextStep","Sfile","setFile","setNewFile","useActions","handleSubmit","e","preventDefault","onChange","addFile","nativeEvent","target","files","sFileExtension","split","pop","toLowerCase","includes","console","log","handleImageChange","TextField","fullWidth","placeholder","Mate","Signup","checkLogin","res","status","setItem","message","autoCapitalize","tel","SignIn","isRegistration","setIsRegistration","setIsAuthTrue","search","window","location","foo","URLSearchParams","get","error","login","verification","data","logo","inputmask","formikprops","securetextentry","infovalidation","lock","MainContainer","setBtnTheme","SignInExport"],"mappings":"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","file":"static/js/23.2749c0d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MaskGroup.40df2b6f.svg\";","export default __webpack_public_path__ + \"static/media/Vector.d2b5b58d.svg\";","import * as Yup from \"yup\";\r\nimport { RequiredStringSchema } from \"yup/lib/string\";\r\n\r\nexport function getPasswordValidationSchema<T>(): RequiredStringSchema<\r\n  string | undefined,\r\n  Record<string, T>\r\n> {\r\n  return (\r\n    Yup.string()\r\n      .min(8, \"Must be at least 8 characters long\")\r\n      .max(128, \"Maximum length is 128 characters\")\r\n      .matches(\r\n        /^[ -~]+$/,\r\n        \"Must be only latin letters, numbers, special\\u00A0characters\"\r\n      )\r\n      .matches(\r\n        /^[^ ].+[^ ]$/,\r\n        \"There should be no spaces at the beginning and at the end\"\r\n      )\r\n      // .matches(\r\n      //   /(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/,\r\n      //   \"Must be at least one\\u00A0uppercase, one\\u00A0lowercase, one\\u00A0number and one\\u00A0special\\u00A0character\"\r\n      // )\r\n      // .matches(\r\n      //   /(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])/,\r\n      //   \"Must be at least one\\u00A0uppercase, one\\u00A0lowercase, one\\u00A0number\"\r\n      // )\r\n      .required(\"Required\")\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\n\r\nimport {getPasswordValidationSchema} from '../../../../../Services/getPasswordValidationSchema';\r\n\r\nexport const validationSchema = Yup.object({\r\n  newPassword: getPasswordValidationSchema(),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\r\n});\r\n\r\nexport const initialState = { newPassword: '', repeatPassword: '' };\r\n","import * as Yup from \"yup\";\r\n\r\nimport { getPasswordValidationSchema } from \"../../../../../Services/getPasswordValidationSchema\";\r\n\r\nexport const passwordInfoValidation = [\r\n  { name: \"At least 8 characters\", validation: /^.{8,}$/ },\r\n  // {name: 'At least 1 uppercase letter (A-Z)', validation: /(?=.*[A-Z])/},\r\n  // {name: 'At least 1 lowercase letter (a-z)', validation: /(?=.*[a-z])/},\r\n  // {name: 'At least one number (0-9)', validation: /(?=.*[0-9])/},\r\n\r\n  // {\r\n  //   name: 'At least one special character (!\"#$%&\\'()*+,-.:;<=>?@[\\\\]^_`{|}~)',\r\n  //   validation: /(?=.*[!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/\r\n  // }\r\n];\r\n\r\nconst phoneRegExp =\r\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\nexport const validationSchema = Yup.object({\r\n  phoneNumber: Yup.string()\r\n    .matches(phoneRegExp, \"Phone number is not valid\")\r\n    .required(\"Required\"),\r\n  newPassword: getPasswordValidationSchema(),\r\n});\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n  type: 'button' | 'submit' | 'reset' | undefined;\r\n  onClickFunction: () => void;\r\n  className: string;\r\n  text: string;\r\n};\r\n\r\nconst Button = (props: Props): JSX.Element => {\r\n  const {type, onClickFunction, className, text} = props;\r\n\r\n  return (\r\n    <button type={type} className={className} onClick={onClickFunction}>\r\n      <span>{text}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport {Typography} from '@material-ui/core';\r\n\r\ntype Props = {\r\n  firstText: string;\r\n  secondText: string;\r\n  onClickFunction: () => void;\r\n};\r\n\r\nconst TypographyComponent = (props: Props): JSX.Element => {\r\n  const {firstText, secondText, onClickFunction} = props;\r\n\r\n  return (\r\n    <Typography className='main-page-text'>\r\n      {firstText}\r\n      <span className='main-page-underline-text' onClick={onClickFunction}>{secondText}</span>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default TypographyComponent;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nimport Vector from \"../../../../assets/Vector.svg\";\r\nimport { initialState, validationSchema } from \"./constants\";\r\nimport { passwordInfoValidation } from \"../SignIn/constants\";\r\nimport Button from \"../../../../Services/buttons\";\r\nimport TypographyComponent from \"../../../../Services/typography\";\r\nimport SignIn from \"../SignIn\";\r\n\r\nimport { registration } from \"../../../../API/userAPI\";\r\nimport { useTypedSelector } from \"../../../../Store/hooks/useTypedSelector\";\r\n// import { useActions } from \"../../../../Store/hooks/useActions\";\r\n\r\nimport \"./styles.scss\";\r\nimport AttachPhoto from \"../AttachPhoto\";\r\n\r\ntype Props = {\r\n  btnTheme: string;\r\n  changeForm: (item: string) => void;\r\n};\r\n\r\ntype FormData = {\r\n  newPassword: string;\r\n  repeatPassword: string;\r\n};\r\n\r\nconst PasswordConfirm = (props: Props): JSX.Element => {\r\n  const { btnTheme, changeForm } = props;\r\n  const [isSignIn, setIsSignIn] = useState(\"\");\r\n  const [isAttachPhoto, setIsAttachPhoto] = useState(\"\");\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [isNextStep, setNextStep] = useState(\"\");\r\n  const { file } = useTypedSelector((state) => state.newFile);\r\n  // const { setIsAuthTrue } = useActions();\r\n\r\n  const click = async (values: FormData): Promise<void> => {\r\n    try {\r\n      const phoneNumber = sessionStorage.getItem(\"newPhoneNumber\");\r\n      const password = values.newPassword;\r\n      const telegrammID = sessionStorage.getItem(\"tgID\");\r\n      const role = \"USER\";\r\n      if (phoneNumber && password && telegrammID && role && file) {\r\n        const formData = new FormData();\r\n        formData.append(\"telephone_number\", phoneNumber);\r\n        formData.append(\"password\", password);\r\n        formData.append(\"telegram_user_id\", telegrammID);\r\n        formData.append(\"role\", role);\r\n        formData.append(\"img\", file);\r\n        await registration(formData).then(() => {\r\n          alert(\r\n            \"Registration completed successfully. Please wait for data verification\"\r\n          );\r\n          setIsSignIn(\"signin\");\r\n          // setIsAuthTrue();\r\n        });\r\n      }\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  };\r\n\r\n  if (isSignIn === \"signin\")\r\n    return <SignIn btnTheme={btnTheme} changeForm={changeForm} />;\r\n  if (isAttachPhoto === \"attachPhoto\")\r\n    return <AttachPhoto btnTheme={btnTheme} changeForm={changeForm} />;\r\n\r\n  return (\r\n    <Grid className=\"main-grid\">\r\n      <Paper className=\"main-page-paperStyle\">\r\n        <Grid className=\"signin-textContainer\">\r\n          <Typography className=\"backBtn\">\r\n            <i\r\n              className=\"fas fa-arrow-left\"\r\n              onClick={() => setIsAttachPhoto(\"attachPhoto\")}\r\n            />\r\n          </Typography>\r\n          {/*<div className='auth-logo'>LOGO NAME</div>*/}\r\n          <h1 className=\"auth-bold-white-text\">Step 3</h1>\r\n          <Typography\r\n            className=\"signin-whiteText\"\r\n            variant=\"caption\"\r\n            gutterBottom\r\n          >\r\n            Enter your password\r\n          </Typography>\r\n\r\n          <Formik\r\n            initialValues={initialState}\r\n            validationSchema={validationSchema}\r\n            validateOnMount={true}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              click(values);\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {(formikProps) => (\r\n              <Form>\r\n                <div className=\"signin-login\">\r\n                  <Field\r\n                    name=\"newPassword\"\r\n                    type=\"password\"\r\n                    label=\"New Password\"\r\n                    secureTextEntry={true}\r\n                    formikProps={formikProps}\r\n                    infoValidation={passwordInfoValidation}\r\n                    className=\"input-base\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"newPassword\"\r\n                    className=\"error-red\"\r\n                    component=\"div\"\r\n                  />\r\n                  <img src={Vector} id=\"lock\" alt=\"Lock\" />\r\n                </div>\r\n\r\n                <div className=\"signin-login\">\r\n                  <Field\r\n                    name=\"repeatPassword\"\r\n                    label=\"Repeat Password\"\r\n                    type=\"password\"\r\n                    secureTextEntry={true}\r\n                    formikProps={formikProps}\r\n                    infoValidation={true}\r\n                    className=\"input-base\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"repeatPassword\"\r\n                    className=\"error-red\"\r\n                    component=\"div\"\r\n                  />\r\n                  <img src={Vector} id=\"lock\" alt=\"Lock\" />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClickFunction={() => setNextStep(\"nextStep\")}\r\n                  className=\"sign-btnStyle-pressed\"\r\n                  text=\"Registration\"\r\n                />\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n\r\n          <TypographyComponent\r\n            firstText=\"Already have an account?  \"\r\n            secondText=\"Sign in\"\r\n            onClickFunction={() => setIsSignIn(\"signin\")}\r\n          />\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PasswordConfirm;\r\n","import React, { useState } from \"react\";\r\nimport SignIn from \"../SignIn\";\r\nimport { Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\n\r\nimport Mate from \"../../../../assets/MaskGroup.svg\";\r\nimport PasswordConfirm from \"../PasswordConfirm\";\r\nimport Button from \"../../../../Services/buttons\";\r\nimport TypographyComponent from \"../../../../Services/typography\";\r\nimport Signup from \"../SignUp\";\r\n\r\nimport { useActions } from \"../../../../Store/hooks/useActions\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype Props = {\r\n  btnTheme: string;\r\n  changeForm: (item: string) => void;\r\n};\r\n\r\nconst AttachPhoto = (props: Props): JSX.Element => {\r\n  const { btnTheme, changeForm } = props;\r\n  const [isSignIn, setIsSignIn] = useState(\"\");\r\n  const [isSignUp, setIsSignUp] = useState(\"\");\r\n  const [isNextStep, setNextStep] = useState(\"\");\r\n  const [Sfile, setFile] = useState<File>();\r\n  const { setNewFile } = useActions();\r\n  // const { file } = useTypedSelector((state) => state.newFile);\r\n\r\n  const handleSubmit = (\r\n    e:\r\n      | React.FormEvent<HTMLFormElement>\r\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    if (Sfile) setNextStep(\"nextStep\");\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const addFile = e.nativeEvent.target.files[0];\r\n    const sFileName = addFile.name;\r\n    const sFileExtension = sFileName.split(\".\").pop().toLowerCase();\r\n    const extensionList = [\"jpg\", \"jpeg\", \"png\", \"bmp\", \"webp\"];\r\n    if (!extensionList.includes(sFileExtension)) {\r\n      alert(\"Attach the photo file\");\r\n    } else {\r\n      setNewFile(addFile);\r\n      setFile(addFile);\r\n      console.log(addFile);\r\n    }\r\n  };\r\n\r\n  if (isSignIn === \"signin\")\r\n    return <SignIn btnTheme={btnTheme} changeForm={changeForm} />;\r\n  if (isNextStep === \"nextStep\")\r\n    return <PasswordConfirm btnTheme={btnTheme} changeForm={changeForm} />;\r\n  if (isSignUp === \"signup\")\r\n    return <Signup btnTheme={btnTheme} changeForm={changeForm} />;\r\n\r\n  return (\r\n    <Grid className=\"main-grid\">\r\n      <Paper className=\"main-page-paperStyle\">\r\n        <Grid className=\"attachPhoto-Container\">\r\n          <Typography className=\"backBtn\">\r\n            <i\r\n              className=\"fas fa-arrow-left\"\r\n              onClick={() => setIsSignUp(\"signup\")}\r\n            />\r\n          </Typography>\r\n          <h1 className=\"auth-bold-white-text\">Step 2</h1>\r\n          <Typography\r\n            className=\"signin-whiteText\"\r\n            variant=\"caption\"\r\n            gutterBottom\r\n          >\r\n            Attach a selfie with a document, as shown at the picture\r\n          </Typography>\r\n\r\n          <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"step2-attach-photo\">\r\n              <input\r\n                className=\"fileInput\"\r\n                type=\"file\"\r\n                onChange={(e) => handleImageChange(e)}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                placeholder={Sfile ? Sfile.name : \"Attach the photo\"}\r\n                className=\"field\"\r\n              />\r\n\r\n              <button\r\n                type=\"submit\"\r\n                onClick={(e) => handleSubmit(e)}\r\n                className=\"submitButton\"\r\n              >\r\n                <i id=\"rotate\" className=\"fas fa-paperclip text-color\" />\r\n              </button>\r\n            </div>\r\n\r\n            <img src={Mate} alt=\"man\" className=\"step2-mate\" />\r\n\r\n            <Button\r\n              type=\"button\"\r\n              onClickFunction={() => {\r\n                Sfile ? setNextStep(\"nextStep\") : setNextStep(\"\");\r\n              }}\r\n              className=\"step2-btnStyle-attach-photo\"\r\n              text=\"Next step\"\r\n            />\r\n\r\n            <TypographyComponent\r\n              firstText=\"Already have an account?  \"\r\n              secondText=\"Sign in\"\r\n              onClickFunction={() => setIsSignIn(\"signin\")}\r\n            />\r\n          </form>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AttachPhoto;\r\n","import * as Yup from \"yup\";\r\n\r\nconst phoneRegExp =\r\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\nexport const validationSchema = Yup.object({\r\n  phoneNumber: Yup.string()\r\n    .matches(phoneRegExp, \"Phone number is not valid\")\r\n    .required(\"Required\"),\r\n});\r\n","export default __webpack_public_path__ + \"static/media/Vector_tel.a3cd1643.svg\";","import React, { useState } from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nimport SignIn from \"../SignIn\";\r\nimport AttachPhoto from \"../AttachPhoto\";\r\nimport { validationSchema } from \"./constants\";\r\nimport Button from \"../../../../Services/buttons\";\r\nimport TypographyComponent from \"../../../../Services/typography\";\r\nimport { Props, FormData, ResponseData } from \"./types\";\r\nimport { checkLogin } from \"../../../../API/userAPI\";\r\n\r\nimport \"./styles.scss\";\r\nimport tel from \"../../../../assets/Vector_tel.svg\";\r\n\r\nconst Signup = (props: Props): JSX.Element => {\r\n  const { btnTheme, changeForm } = props;\r\n  const [isSignIn, setIsSignIn] = useState(\"\");\r\n  const [isNextStep, setNextStep] = useState(\"\");\r\n\r\n  const click = async (values: FormData): Promise<void> => {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const res: ResponseData | any = await checkLogin(values.phoneNumber);\r\n      if (res.status === 200) {\r\n        sessionStorage.setItem(\"newPhoneNumber\", values.phoneNumber);\r\n        setNextStep(\"nextStep\");\r\n        setIsSignIn(\"\");\r\n        return;\r\n      }\r\n      alert(res.message);\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  };\r\n\r\n  if (isSignIn === \"signin\")\r\n    return <SignIn btnTheme={btnTheme} changeForm={changeForm} />;\r\n  if (isNextStep === \"nextStep\")\r\n    return <AttachPhoto btnTheme={btnTheme} changeForm={changeForm} />;\r\n\r\n  return (\r\n    <Grid className=\"main-grid\">\r\n      <Paper className=\"main-page-paperStyle\">\r\n        <Grid className=\"signin-textContainer\">\r\n          <h1 className=\"auth-bold-white-text\">{\"Let's get started!\"}</h1>\r\n          <Typography\r\n            className=\"signin-whiteText\"\r\n            variant=\"caption\"\r\n            gutterBottom\r\n          >\r\n            Enter your phone\r\n          </Typography>\r\n          <Formik\r\n            initialValues={{ phoneNumber: \"\" }}\r\n            validationSchema={validationSchema}\r\n            validateOnMount={true}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              click(values);\r\n              // setNextStep(\"nextStep\");\r\n              // setIsSignIn(\"\");\r\n              // console.log(values);\r\n              // alert(JSON.stringify(values, null, 2));\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {(formikProps) => (\r\n              <Form>\r\n                <div className=\"signin-login\">\r\n                  <Field\r\n                    name=\"phoneNumber\"\r\n                    label=\"phoneNumber\"\r\n                    placeholder=\" your phone number\"\r\n                    autoCapitalize=\"none\"\r\n                    // transformValue={(value: string) => value.trim()}\r\n                    className=\"input-base\"\r\n                    formikProps={formikProps}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"phoneNumber\"\r\n                    className=\"error-red\"\r\n                    component=\"div\"\r\n                  />\r\n                  <img src={tel} id=\"login\" alt=\"phone\" />\r\n                  <i id=\"login-plus\" className=\"fas fa-plus text-color\" />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClickFunction={() => changeForm(btnTheme)}\r\n                  className=\"sign-btnStyle-phone-page\"\r\n                  text=\"Next step\"\r\n                />\r\n\r\n                <TypographyComponent\r\n                  firstText=\"Already have an account?  \"\r\n                  secondText=\"Sign in\"\r\n                  onClickFunction={() => setIsSignIn(\"signin\")}\r\n                />\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","export default __webpack_public_path__ + \"static/media/Vector_lock.d2b5b58d.svg\";","import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\n\r\nimport Signup from \"../SignUp\";\r\nimport tel from \"../../../../assets/Vector_tel.svg\";\r\nimport lock from \"../../../../assets/Vector_lock.svg\";\r\nimport { passwordInfoValidation, validationSchema } from \"./constants\";\r\nimport Button from \"../../../../Services/buttons\";\r\nimport TypographyComponent from \"../../../../Services/typography\";\r\nimport logo from \"../../../../assets/logo.svg\";\r\nimport \"./styles.scss\";\r\n\r\nimport { useActions } from \"../../../../Store/hooks/useActions\";\r\nimport { login } from \"../../../../API/userAPI\";\r\n\r\nimport { Props, FormData, ResponseData } from \"./types\";\r\n\r\nconst SignIn = (props: Props): JSX.Element => {\r\n  const { btnTheme, changeForm } = props;\r\n  const [isRegistration, setIsRegistration] = useState(\"\");\r\n  const { setIsAuthTrue } = useActions();\r\n\r\n  try {\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const foo = params.get(\"tgID\");\r\n    if (foo) {\r\n      sessionStorage.setItem(\"tgID\", foo);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const click = async (values: FormData): Promise<void> => {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const res: ResponseData | any = await login(\r\n        values.phoneNumber,\r\n        values.newPassword\r\n      );\r\n\r\n      if (!res.error) {\r\n        res.verification ? setIsAuthTrue() : alert(\"Please, wait verification\");\r\n        return;\r\n      }\r\n      alert(res.data.message);\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  };\r\n\r\n  if (isRegistration === \"registration\")\r\n    return <Signup btnTheme={btnTheme} changeForm={changeForm} />;\r\n\r\n  return (\r\n    <Grid className=\"main-grid\">\r\n      <Paper className=\"main-page-paperStyle\">\r\n        <Grid className=\"signin-textContainer\">\r\n          <div className=\"auth-logo\">\r\n            <img src={logo} alt=\"logo\" />\r\n          </div>\r\n          <h1 className=\"auth-bold-white-text\">Welcome Back!</h1>\r\n\r\n          <Typography\r\n            className=\"signin-whiteText\"\r\n            variant=\"caption\"\r\n            gutterBottom\r\n          >\r\n            Log in to your existant account\r\n          </Typography>\r\n          <Formik\r\n            initialValues={{ phoneNumber: \"\", newPassword: \"\" }}\r\n            validationSchema={validationSchema}\r\n            validateOnMount={true}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              click(values);\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {(formikProps) => (\r\n              <Form className=\"signin-form\">\r\n                <div className=\"signin-login\">\r\n                  <Field\r\n                    name=\"phoneNumber\"\r\n                    label=\"phoneNumber\"\r\n                    inputmask=\"+9999999999\"\r\n                    placeholder=\" phone number\"\r\n                    autoCapitalize=\"none\"\r\n                    // transformvalue={(value: string) => value.trim()}\r\n                    className=\"input-base\"\r\n                    formikprops={formikProps}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"phoneNumber\"\r\n                    component=\"div\"\r\n                    className=\"error-red\"\r\n                  />\r\n                  <img src={tel} id=\"login\" alt=\"phone\" />\r\n                  <i id=\"login-plus\" className=\"fas fa-plus text-color\" />\r\n                </div>\r\n\r\n                <div className=\"signin-login\">\r\n                  <Field\r\n                    name=\"newPassword\"\r\n                    label=\"New Password\"\r\n                    type=\"password\"\r\n                    placeholder=\" password\"\r\n                    securetextentry=\"true\"\r\n                    formikprops={formikProps}\r\n                    infovalidation={passwordInfoValidation}\r\n                    className=\"input-base\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"newPassword\"\r\n                    component=\"div\"\r\n                    className=\"error-red\"\r\n                  />\r\n                  <img src={lock} id=\"login\" alt=\"phone\" />\r\n                </div>\r\n\r\n                <Grid>\r\n                  <div className=\"signin-underline-text\">Forgot password?</div>\r\n                </Grid>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClickFunction={() => changeForm(btnTheme)}\r\n                  className=\"sign-btnStyle-pressed\"\r\n                  text=\"Sign in\"\r\n                />\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n\r\n          <TypographyComponent\r\n            firstText=\"Haven’t an account?  \"\r\n            secondText=\"Registration\"\r\n            onClickFunction={() => {\r\n              setIsRegistration(\"registration\");\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useState } from \"react\";\r\nimport SignIn from \"../components/SignIn\";\r\n\r\nconst MainContainer = (): JSX.Element => {\r\n  const [btnTheme, setBtnTheme] = useState(\"initial\");\r\n\r\n  const changeForm = (btnTheme: string) => {\r\n    if (btnTheme === \"initial\") setBtnTheme(\"pressed\");\r\n  };\r\n\r\n  return <SignIn btnTheme={btnTheme} changeForm={changeForm} />;\r\n};\r\n\r\nexport default MainContainer;\r\n","import SignInExport from './containers/mainContainer';\r\n\r\nexport default SignInExport;\r\n"],"sourceRoot":""}